import React, { useState, useRef, useEffect } from 'react';
import { Calendar, momentLocalizer, SlotInfo } from 'react-big-calendar';
import moment from 'moment';
import 'moment/locale/es';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import './calendar-styles.css'; // Estilos personalizados
import { Reservation, Table, ReservationConfig } from '../../types';
import { extractLocalTime } from '../../utils/dateUtils';
import { useAuth } from '../../contexts/AuthContext';
import { showError, showConfirm } from '../../utils/alerts';

// Extender la interfaz Window para incluir la configuración de reservas
declare global {
  interface Window {
    reservationConfig?: ReservationConfig;
  }
}

// Configurar el localizer con moment
moment.locale('es');

// Configurar Moment para tratar todas las fechas como locales (no UTC)
moment.updateLocale('es', {
  week: {
    dow: 1, // Lunes es el primer día de la semana
    doy: 4  // La semana que contiene Jan 4th es la primera semana del año
  },
  months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
  monthsShort: 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
  weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
  weekdaysShort: 'dom_lun_mar_mié_jue_vie_sáb'.split('_'),
  weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_')
});

const localizer = momentLocalizer(moment);

// Funciones para obtener las horas de inicio y fin desde la configuración
const getMinTime = (): Date => {
  // Verificar si existe la configuración global de reservas
  if (window.reservationConfig && window.reservationConfig.allowed_start_time) {
    const [hours, minutes] = window.reservationConfig.allowed_start_time.split(':').map(Number);
    return new Date(0, 0, 0, hours, minutes);
  }
  // Valor predeterminado si no hay configuración
  return new Date(0, 0, 0, 8, 0); // 8:00 AM
};

const getMaxTime = (): Date => {
  // Verificar si existe la configuración global de reservas
  if (window.reservationConfig && window.reservationConfig.allowed_end_time) {
    const [hours, minutes] = window.reservationConfig.allowed_end_time.split(':').map(Number);
    
    // Limitamos las horas para evitar problemas con valores que excedan las 24h
    // Si la hora configurada es >= 22:00, usamos 23:59 como máximo para evitar errores
    if (hours >= 22) {
      return new Date(0, 0, 0, 23, 59);
    } 
    
    // Para horas entre 21:00 y 21:59, usamos exactamente 23:59
    // para evitar sobrepasar las 24h después de añadir la compensación
    else if (hours === 21) {
      return new Date(0, 0, 0, 23, 59);
    }
    
    // Para el resto de horas, añadimos 2 horas de compensación como antes
    else {
      return new Date(0, 0, 0, hours + 2, minutes);
    }
  }
  
  // Valor predeterminado si no hay configuración (añadimos 2 horas para compensar)
  return new Date(0, 0, 0, 24, 0); // 22:00 PM + 2 horas = medianoche
};

interface CalendarProps {
  reservations: Reservation[];
  tables: Table[];
  onSelectSlot: (tableId: number, start: Date, end: Date) => void;
  onCancelReservation: (id: number) => Promise<void>;
}

interface CalendarEvent {
  id: number;
  title: string;
  start: Date;
  end: Date;
  tableId: number;
  userId: number;
  isAllDay: boolean;
  status: 'active' | 'cancelled' | 'completed';
  resource?: Table;
}

interface TableSelectionPopoverProps {
  tables: Table[];
  slotInfo: SlotInfo;
  onSelectTable: (tableId: number, start: Date, end: Date) => void;
  onClose: () => void;
  position: { top: number; left: number };
}

// Componente para seleccionar mesa
const TableSelectionPopover: React.FC<TableSelectionPopoverProps> = ({ 
  tables, 
  slotInfo, 
  onSelectTable,
  onClose,
  position
}) => {
  return (
    <div 
      className="table-selection-popover fixed z-50" 
      style={{ top: position.top, left: position.left }}
    >
      <div className="font-medium mb-2">Selecciona una mesa:</div>
      <div className="space-y-2 max-h-48 overflow-y-auto">
        {tables.map(table => (
          <div 
            key={table.id}
            className="p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer transition-colors"
            onClick={() => {
              onSelectTable(table.id, new Date(slotInfo.start), new Date(slotInfo.end));
              onClose();
            }}
          >
            <div className="font-medium">{table.name}</div>
            {table.description && (
              <div className="text-xs text-gray-600 dark:text-gray-400">{table.description}</div>
            )}
          </div>
        ))}
      </div>
      <button 
        className="mt-3 text-xs text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
        onClick={onClose}
      >
        Cancelar
      </button>
    </div>
  );
};

const Calendar7Days: React.FC<CalendarProps> = ({
  reservations,
  tables,
  onSelectSlot,
  onCancelReservation
}) => {
  const { user } = useAuth();
  const [view, setView] = useState<"month" | "week" | "day">("week");
  const [date, setDate] = useState<Date>(new Date());
  const [showTableSelector, setShowTableSelector] = useState(false);
  const [selectedSlot, setSelectedSlot] = useState<SlotInfo | null>(null);
  const [popoverPosition, setPopoverPosition] = useState({ top: 0, left: 0 });
  const calendarRef = useRef<HTMLDivElement>(null);
  
  // Estados para las horas de inicio y fin del calendario
  const [minTime, setMinTime] = useState<Date>(getMinTime());
  const [maxTime, setMaxTime] = useState<Date>(getMaxTime());
    // Actualizar las horas de inicio y fin cuando cambie la configuración
  useEffect(() => {
    // Crear una función para actualizar las horas
    const updateCalendarTimes = () => {
      const minT = getMinTime();
      const maxT = getMaxTime();
      setMinTime(minT);
      setMaxTime(maxT);
      
      // Log para debugging más detallado
      console.log('Horas del calendario configuradas:', { 
        allowedStartTime: window.reservationConfig?.allowed_start_time || '08:00',
        allowedEndTime: window.reservationConfig?.allowed_end_time || '22:00',
        minTimeHours: minT.getHours() + ':' + minT.getMinutes(),
        maxTimeHours: maxT.getHours() + ':' + maxT.getMinutes(),
        minTimeObj: minT,
        maxTimeObj: maxT,
        // Información sobre la compensación
        compensacionAplicada: window.reservationConfig?.allowed_end_time ? 
          `De ${window.reservationConfig.allowed_end_time} a ${maxT.getHours()}:${maxT.getMinutes()}` : 
          'Usando valor predeterminado'
      });
    };
    
    // Ejecutar la actualización al montar el componente
    updateCalendarTimes();
    
    return () => {
      // Limpieza si es necesario
    };
  }, []);

  // Función para obtener el rango de fechas comenzando desde hoy y durando 7 días
  const getCustomRange = (date: Date) => {
    // Siempre empezar desde hoy
    const today = new Date();
    
    // Si la fecha proporcionada es hoy o anterior, comenzar desde hoy
    // Si la fecha es futura, mantener esa fecha como inicio
    const start = date < today ? today : date;
    
    // Calcular fecha de fin (inicio + 6 días = 7 días en total)
    const end = new Date(start);
    end.setDate(start.getDate() + 6); 
    
    return { start, end };
  };

  // Efecto para inicializar el calendario con la fecha actual
  useEffect(() => {
    setDate(new Date());
  }, []);  // Convertir reservas al formato esperado por el calendario
  // Filtrar todas las reservas canceladas (no se mostrarán en el calendario)
  const filteredReservations = reservations.filter(reservation => 
    // Filtrar reservas canceladas para todos los usuarios
    reservation.status !== 'cancelled'
  );

  const events: CalendarEvent[] = filteredReservations.map(reservation => {
    const start = extractLocalTime(reservation.start_time);
    const end = extractLocalTime(reservation.end_time);

    const table = tables.find(t => t.id === reservation.table_id);
    return {
      id: reservation.id,
      title: table ? `${table.name} ${reservation.user_id === user?.id ? '(Tu reserva)' : ''}` : 'Reserva',
      start,
      end,
      tableId: reservation.table_id,
      userId: reservation.user_id,
      isAllDay: reservation.all_day,
      status: reservation.status,
      resource: table
    };
  });
  // Función para manejar la selección de un espacio en el calendario
  const handleSelectSlot = (slotInfo: SlotInfo) => {
    if (!user) {
      window.location.href = '/auth';
      return;
    }
    
    // Verificar si la fecha y hora seleccionada es en el pasado
    const now = new Date();
    const slotStart = new Date(slotInfo.start);
    const slotEnd = new Date(slotInfo.end);    // No permitir reservas en el pasado
    if (slotStart < now) {
      showError('Fecha no válida', 'No se pueden realizar reservas en fechas u horas pasadas');
      return;
    }
      // Verificar la duración de la reserva (para cumplir con max_hours_per_reservation)
    const maxHours = window.reservationConfig?.max_hours_per_reservation || 4;
    const reservationDuration = (slotEnd.getTime() - slotStart.getTime()) / (1000 * 60 * 60);
    
    if (reservationDuration > maxHours) {
      showError('Duración excedida', `La reserva no puede durar más de ${maxHours} horas`);
      return;
    }
    
    // Si estamos en la vista de mes, cambiar a la vista de día
    if (view === "month") {
      setDate(new Date(slotInfo.start));
      setView("day");
      return;
    }
    
    // Si hay más de una mesa, mostrar el selector
    if (tables.length > 1) {
      setSelectedSlot(slotInfo);
      
      // Calcular posición para el popover
      if (calendarRef.current) {
        // En dispositivos táctiles posicionamos en el centro
        const x = window.innerWidth / 2 - 125;
        const y = window.innerHeight / 2 - 150;
        
        setPopoverPosition({
          left: Math.min(x, window.innerWidth - 260),
          top: Math.min(y, window.innerHeight - 300)
        });
      }
      
      setShowTableSelector(true);
    } else if (tables.length === 1) {
      // Si solo hay una mesa, seleccionarla directamente
      const tableId = tables[0].id;
      const start = new Date(slotInfo.start);
      const end = new Date(slotInfo.end);
      onSelectSlot(tableId, start, end);
    }
  };

  // Manejar la selección de mesa
  const handleTableSelect = (tableId: number, start: Date, end: Date) => {
    onSelectSlot(tableId, start, end);
  };

  // Personalizar la apariencia del evento
  const eventStyleGetter = (event: CalendarEvent) => {
    const isUserReservation = event.userId === user?.id;
    const isAllDay = event.isAllDay;
    const status = event.status;
    
    // Base color según el propietario de la reserva y si es todo el día
    let baseColor = isUserReservation 
      ? isAllDay ? '#9c27b0' : '#3788d8' 
      : isAllDay ? '#9c27b0' : '#e74c3c';
      
    // Ajustar color según el estado
    if (status === 'cancelled') {
      baseColor = '#8a8a8a'; // Gris para reservas canceladas
    } else if (status === 'completed') {
      baseColor = '#4caf50'; // Verde para reservas completadas
    }
    
    const style = {
      backgroundColor: baseColor,
      color: '#ffffff',
      border: '0px',
      borderRadius: '6px',
      boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)',
      opacity: status === 'active' ? 0.9 : 0.7, // Las reservas no activas aparecen más transparentes
    };
    
    return { style };
  };
  // Función para manejar la cancelación de reserva con SweetAlert
  const handleCancelReservationWithConfirm = async (event: CalendarEvent) => {
    // Solo permitir cancelar reservas propias y activas
    if (event.userId !== user?.id || event.status !== 'active') return;
    
    const isConfirmed = await showConfirm(
      'Cancelar reserva',
      '¿Estás seguro de que deseas cancelar esta reserva?',
      'Cancelar reserva',
      'Volver'
    );
    
    if (isConfirmed) {
      onCancelReservation(event.id);
    }
  };

  // Personalizar la vista del evento
  const EventComponent = ({ event }: { event: CalendarEvent }) => {
    const isUserReservation = event.userId === user?.id;
    
    // Formatear horas con padding de ceros
    const formatHour = (date: Date) => {
      return `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;
    };
    
    // Añadir clase condicional para cursor y estilos si es una reserva propia y activa
    const eventContentClass = isUserReservation && event.status === 'active' 
      ? "rbc-event-content cursor-pointer hover:opacity-90" 
      : "rbc-event-content";
    
    return (      <div 
        className={eventContentClass}
      >
        <div className="font-medium text-white" style={{ textShadow: '0 1px 1px rgba(0,0,0,0.3)' }}>
          {event.title}
          {isUserReservation && <span className="ml-1 text-xs">(Tu reserva)</span>}
        </div>
        <div className="text-xs mt-1 text-white font-medium" style={{ opacity: 0.9 }}>
          {formatHour(event.start)} - {formatHour(event.end)} h
        </div>
        {/* Mostrar un indicador del estado de la reserva */}
        <div className="text-xs mt-1 font-medium">
          {event.status === 'cancelled' && (
            <span className="text-red-200">Cancelada</span>
          )}
          {event.status === 'completed' && (
            <span className="text-blue-200">Completada</span>
          )}
          {isUserReservation && event.status === 'active' && (
            <span className="text-yellow-200 animate-pulse">Toca para cancelar</span>
          )}
        </div>
      </div>
    );
  };
  // Calcular rango personalizado para la vista de semana
  const customDayRangeFormat = () => {
    // Calcular el rango de 7 días a partir de hoy o de la fecha seleccionada
    const range = getCustomRange(date);
    const today = new Date();
    const isCurrentWeek = range.start <= today && today <= range.end;
                          
    const rangeText = `${moment(range.start).format('D [de] MMM')} — ${moment(range.end).format('D [de] MMM YYYY')}`;
    return isCurrentWeek ? `${rangeText} (Próximos 7 días)` : rangeText;
  };

  return (
    <div className="h-[600px]" ref={calendarRef}>
      <div className="text-center mb-2 font-medium">
        {view === 'week' && (
          <div className="text-lg">{customDayRangeFormat()}</div>
        )}
      </div>
        <Calendar
        localizer={localizer}
        events={events}
        startAccessor="start"
        endAccessor="end"
        defaultView="week"
        date={date}
        components={{
          event: EventComponent
        }}
        views={{
          month: true,
          week: true,
          day: true
        }}
        onSelectEvent={(event) => {
          if (event.userId === user?.id && event.status === 'active') {
            handleCancelReservationWithConfirm(event);
          }
        }}
        onView={(newView) => {
          // Tipo seguro para las vistas
          const validView = (newView === 'month' || newView === 'week' || newView === 'day') 
            ? newView 
            : 'week';
          setView(validView);
        }}
        onNavigate={(newDate, viewName, action) => {
          // En las vistas de mes o día, navegamos normalmente
          if (view !== 'week' && viewName !== 'week') {
            setDate(newDate);
            return;
          }

          // En la vista semanal, siempre calculamos un rango desde hoy o desde una fecha futura
          if (action === 'TODAY') {
            // Botón "Hoy": mostrar desde hoy
            setDate(new Date());
          } else if (action === 'PREV') {
            // Anterior: retroceder 7 días
            const currentDate = new Date(date);
            currentDate.setDate(currentDate.getDate() - 7);
            
            // Si la fecha resultante es anterior a hoy, volver a hoy
            const today = new Date();
            if (currentDate < today) {
              setDate(today);
            } else {
              setDate(currentDate);
            }
          } else if (action === 'NEXT') {
            // Siguiente: avanzar 7 días
            const currentDate = new Date(date);
            currentDate.setDate(currentDate.getDate() + 7);
            setDate(currentDate);
          } else {
            // Para cualquier otra acción, volver a la fecha actual
            setDate(new Date());
          }
        }}        // Configuración para usar la fecha actual        getNow={() => new Date()} // Asegurar que "hoy" es siempre la fecha actual
        step={60}
        timeslots={1}
        min={minTime} // Hora de inicio desde la configuración
        // NOTA IMPORTANTE: El tiempo máximo (max) en React Big Calendar necesita compensación.
        // Cuando configuramos max=23:59, el calendario mostrará slots hasta las 21:59.
        // Para horas de fin >= 21:00, limitamos a 23:59 para evitar errores de "Invalid array length".
        // La propiedad max controla hasta qué hora se mostrarán las franjas horarias en el calendario,
        // pero siempre se visualizarán aproximadamente 2 horas menos que el valor configurado.
        max={maxTime} // Hora de fin desde la configuración (con compensación)
        formats={{
          timeGutterFormat: (date) => moment(date).format('HH:mm') + ' h',
          eventTimeRangeFormat: ({ start, end }) => 
            `${moment(start).format('HH:mm')} - ${moment(end).format('HH:mm')} h`,
          dayFormat: (date) => moment(date).format('ddd D'),
          weekdayFormat: (date) => moment(date).format('dddd'),
          monthHeaderFormat: (date) => moment(date).format('MMMM YYYY'),
          dayHeaderFormat: (date) => moment(date).format('dddd, D [de] MMMM [de] YYYY')
        }}
        onSelectSlot={handleSelectSlot}
        selectable
        popup
        eventPropGetter={eventStyleGetter}
        messages={{
          next: "Siguiente",
          previous: "Anterior",
          today: "Hoy",
          month: "Mes",
          week: "Próximos 7 días", 
          day: "Día",
          noEventsInRange: "No hay reservas en este período",
          showMore: (total) => `+ ${total} más`,
          allDay: "Todo el día",
          date: "Fecha",
          time: "Hora",
          event: "Evento"
        }}
        className="rounded-lg overflow-hidden"
      />
      
      {showTableSelector && selectedSlot && (
        <TableSelectionPopover
          tables={tables}
          slotInfo={selectedSlot}
          onSelectTable={handleTableSelect}
          onClose={() => setShowTableSelector(false)}
          position={popoverPosition}
        />
      )}
    </div>
  );
};

export { Calendar7Days };
