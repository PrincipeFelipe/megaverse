/**
 * Controlador espec√≠fico para la configuraci√≥n del logger
 */

import { LoggerConfigService } from '../services/loggerConfigService.js';

// Obtener configuraci√≥n del logger
export const getLoggerConfig = async (req, res) => {
  try {
    console.log('[LoggerController] üìã GET /api/logger/config - Solicitando configuraci√≥n');
    const config = await LoggerConfigService.getConfig();
    console.log('[LoggerController] üì§ Enviando configuraci√≥n al frontend:', config);
    res.status(200).json({
      success: true,
      config
    });
  } catch (error) {
    console.error('[LoggerController] ‚ùå Error al obtener configuraci√≥n del logger:', error);
    res.status(500).json({ 
      success: false,
      error: 'Error al obtener configuraci√≥n del logger' 
    });
  }
};

// Actualizar configuraci√≥n del logger
export const updateLoggerConfig = async (req, res) => {
  try {
    console.log('[LoggerController] üíæ PUT /api/logger/config - Datos recibidos:', req.body);
    const { enabled, level, moduleFilters } = req.body;
    
    // Validaciones b√°sicas
    if (enabled !== undefined && typeof enabled !== 'boolean') {
      console.log('[LoggerController] ‚ùå Validaci√≥n fallida: enabled no es booleano');
      return res.status(400).json({ 
        success: false,
        error: 'El campo "enabled" debe ser booleano' 
      });
    }
    
    if (level !== undefined && !['error', 'warn', 'info', 'debug', 'verbose'].includes(level)) {
      console.log('[LoggerController] ‚ùå Validaci√≥n fallida: nivel inv√°lido');
      return res.status(400).json({ 
        success: false,
        error: 'Nivel de log inv√°lido' 
      });
    }
    
    if (moduleFilters !== undefined && !Array.isArray(moduleFilters)) {
      console.log('[LoggerController] ‚ùå Validaci√≥n fallida: moduleFilters no es array');
      return res.status(400).json({ 
        success: false,
        error: 'Los filtros de m√≥dulos deben ser un array' 
      });
    }

    console.log('[LoggerController] ‚úÖ Validaciones pasadas, actualizando configuraci√≥n...');
    const success = await LoggerConfigService.updateConfig({
      enabled,
      level,
      moduleFilters
    });
    
    if (success) {
      console.log('[LoggerController] ‚úÖ Configuraci√≥n actualizada, obteniendo nueva configuraci√≥n...');
      const updatedConfig = await LoggerConfigService.getConfig();
      console.log('[LoggerController] üì§ Enviando configuraci√≥n actualizada:', updatedConfig);
      res.status(200).json({
        success: true,
        message: 'Configuraci√≥n del logger actualizada correctamente',
        config: updatedConfig
      });
    } else {
      console.log('[LoggerController] ‚ùå Error al actualizar configuraci√≥n');
      res.status(500).json({
        success: false,
        error: 'Error al actualizar configuraci√≥n del logger'
      });
    }
  } catch (error) {
    console.error('[LoggerController] ‚ùå Error al actualizar configuraci√≥n del logger:', error);
    res.status(500).json({ 
      success: false,
      error: 'Error del servidor al actualizar configuraci√≥n del logger' 
    });
  }
};
